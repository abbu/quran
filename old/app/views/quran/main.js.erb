<script type="text/javascript">
    var Quran = new Ext.app.Quran({
        init: function() {
            Ext.QuickTips.init();
        },
        getModules: function() {
            return [new Quran.Reader(), new Quran.Multimedia()
            //new Quran.TabWindow(), 
            //new Quran.AccordionWindow(), 
            //new Quran.BogusMenuModule(), 
            //new Quran.BogusModule()
            ];
        },
        // config for the start menu
        getStartConfig: function() {
            return {
                title: 'Quran.com Desktop (pre-alpha)',
                iconCls: 'quran-logo-icon',
                toolItems: [{
                    text: 'Settings',
                    iconCls: 'settings',
                    scope: this
                },
                '-', {
                    text: 'Logout',
                    iconCls: 'logout',
                    scope: this
                }]
            };
        }
    });

    /* Quran modules */
    Quran.Multimedia = Ext.extend(Ext.app.Module, {
        id: 'quran-multimedia',
        init: function() {
            this.launcher = {
                text: 'Quran Multimedia',
                iconCls: 'icon-grid',
                handler: this.createWindow,
                scope: this
            };
        },

        createWindow: function() {
            var desktop = this.app.getDesktop();
            var win = desktop.getWindow('quran-multimedia');
            if (!win) {
                win = desktop.createWindow({
                    id: 'quran-multimedia',
                    title: 'Quran Multimedia',
                    width: 740,
                    height: 480,
                    iconCls: 'icon-grid',
                    shim: false,
                    animCollapse: false,
                    constrainHeader: true,

                    layout: 'fit',
                    items: new Ext.grid.GridPanel({
                        border: false,
                        ds: new Ext.data.Store({
                            reader: new Ext.data.ArrayReader({},
                            [{
                                name: 'company'
                            },
                            {
                                name: 'price',
                                type: 'float'
                            },
                            {
                                name: 'change',
                                type: 'float'
                            },
                            {
                                name: 'pctChange',
                                type: 'float'
                            }]),
                            data: Ext.data.bogus
                        }),
                        cm: new Ext.grid.ColumnModel([new Ext.grid.RowNumberer(), {
                            header: "Company",
                            width: 120,
                            sortable: true,
                            dataIndex: 'company'
                        },
                        {
                            header: "Price",
                            width: 70,
                            sortable: true,
                            renderer: Ext.util.Format.usMoney,
                            dataIndex: 'price'
                        },
                        {
                            header: "Change",
                            width: 70,
                            sortable: true,
                            dataIndex: 'change'
                        },
                        {
                            header: "% Change",
                            width: 70,
                            sortable: true,
                            dataIndex: 'pctChange'
                        }]),

                        viewConfig: {
                            forceFit: true
                        },
                        //autoExpandColumn:'company',
                        tbar: [{
                            text: 'Add Something',
                            tooltip: 'Add a new row',
                            iconCls: 'add'
                        },
                        '-', {
                            text: 'Options',
                            tooltip: 'Blah blah blah blaht',
                            iconCls: 'option'
                        },
                        '-', {
                            text: 'Remove Something',
                            tooltip: 'Remove the selected item',
                            iconCls: 'remove'
                        }]
                    })
                });
            }
            win.show();
        }
    });

    Quran.Reader = Ext.extend(Ext.app.Module, {
        init: function() {
            this.launcher = {
                text: 'Quran Reader',
                iconCls: 'quran-reader-16x16',
                handler: this.createWindow,
                scope: this
            }
        },

        createWindow: function() {

            var page_slider = new Ext.ux.Slider({
                width: 300,
                minValue: 1,
                maxValue: 604
                /*,
                plugins: new Ext.ux.SliderTip({
                    getText: function(slider) {
                        return String.format('<strong>Page {0}</strong>', slider.getValue());
                    }
                })*/
            });
            var chapter_store = new Ext.data.Store({
                reader: new Ext.data.ArrayReader({},
                [{
                    name: 'chapter_id'
                },
                {
                    name: 'display_str'
                }]),
                data: [ <% @chapters.each { |chapter| %>[ <%=chapter.chapter_id %> , '<%= chapter[:number] %>: <%= chapter.name %>'],<% } %> ]
            });
            var chapter_combo_tpl = {
                init: function(combo) {
                    Ext.apply(combo, {
                        tpl: '<tpl for=".">' + '<div class="x-combo-list-item" dir="rtl">' + '{' + combo.displayField + '}' + '</div>' + '</tpl>'
                    });
                }
            };
            var chapter_combo = new Ext.form.ComboBox({
                store: chapter_store,
                valueField: 'chapter_id',
                displayField: 'display_str',
                typeAhead: true,
                mode: 'local',
                triggerAction: 'all',
                emptyText: 'Select chapter...',
                selectOnFocus: true,
                width: 135,
                plugins: chapter_combo_tpl
            });
            var font = {
                size: 2,
                increment: 0.25,
                select: {
                    store: new Ext.data.Store({
                        reader: new Ext.data.ArrayReader({},
                        [{
                            name: 'company'
                        },
                        {
                            name: 'price',
                            type: 'float'
                        },
                        {
                            name: 'change',
                            type: 'float'
                        },
                        {
                            name: 'pctChange',
                            type: 'float'
                        }]),
                        data: Ext.data.bogus
                    }),
                    combo: new Ext.form.ComboBox({
                        store: this.store,
                        displayField: 'company',
                        typeAhead: true,
                        mode: 'local',
                        triggerAction: 'all',
                        emptyText: 'Select font...',
                        selectOnFocus: true,
                        width: 135
                    })
                },
                /*
                toolbar: new Ext.Toolbar({
                    xtype: 'tbbutton',
                    text: '+Increase',
                    iconCls: 'does-not-exist',
                    handler: function() {
                        font.adjust_size(+font.increment);
                    }
                }),
                */
                toolbar: [{
                    xtype: 'tbfill'
                },
                {
                    text: 'Decrease--',
                    iconCls: 'non-existant',
                    handler: function() {
                        font.size = font.size - font.increment;
                        font.resize(font.size);
                    }
                },
                {
                    text: '++Increase',
                    iconCls: 'does-not-exist',
                    handler: function() {
                        font.size = font.size + font.increment;
                        font.resize(font.size);
                    }
                }],
                resize: function(value) {
                    var panel = Ext.getCmp('quran-reader-content');
                    panel.format_appearance();
                    //$.panel = panel;
                    //panel.body.applyStyles({
                    //    'font-size': value + 'em'
                    //});
                }
            };
            /*
            font.select = new Object();
            font.select.store = new Ext.data.Store({
                reader: new Ext.data.ArrayReader({},
                [
                    { name: 'company' },
                    { name: 'price', type: 'float' },
                    { name: 'change', type: 'float' },
                    { name: 'pctChange', type: 'float' }
                ]),
                data: Ext.data.bogus
            });
            font.select.combo = new Ext.form.ComboBox({
                store: font.select.store,
                displayField:'company',
                typeAhead: true,
                mode: 'local',
                triggerAction: 'all',
                emptyText:'Select font...',
                selectOnFocus:true,
                width:135
            });
            font.size = 2;
            font.increment = 0.25;
            font.btn_grow = new Ext.Toolbar.Button({
                text: '+',
                iconCls: 'non-existant',
                handler: function() { font.adjust_size(+font.increment); }
            });
            font.btn_shrink = new Ext.Toolbar.Button({
                text: '-',
                iconCls: 'does-not-exist',
                handler: function() { font.adjust_size(-font.increment); }
            });
*/
            var desktop = this.app.getDesktop();
            var win = desktop.getWindow('quran-reader');
            if (!win) {
                win = desktop.createWindow({
                    id: 'quran-reader',
                    title: 'Quran Reader',
                    width: 800,
                    height: 300,
                    iconCls: 'quran-reader-16x16',
                    shim: false,
                    animCollapse: false,
                    constrainHeader: true,

                    tbar: [{
                        xtype: 'tbtext',
                        text: 'Page:'
                    },
                    page_slider, {
                        xtype: 'tbfill'
                    },
                    chapter_combo],

                    layout: 'fit',
                    defaults: {
                        layout: 'fit'
                    },
                    items: [{
                        id: 'quran-reader-content',
                        xtype: 'panel',
                        autoScroll: true,
                        format_appearance: function(init) {
                            var sura = {};
                            sura.box = $(this.body.dom).find('sura');
                            sura.name = sura.box.find('name');
                            sura.bismillah = sura.box.find('bismillah');
                            sura.ayas = sura.box.find('ayas');
                            sura.aya = sura.box.find('aya');
                            $.sura = sura;
                            if (init) {
                                sura.box.css({
                                    'display': 'block'
                                });
                                sura.name.css({
                                    'display': 'block',
                                    'text-align': 'center',
                                    'background': 'url(sura.png) no-repeat center center',
                                    'height': '78px',
                                    'line-height': '78px',
                                    'direction': 'rtl',
                                    'font-size': '31px',
                                    'font-weight': 'bold'
                                });
                                sura.name.prepend('سورة ');

                                sura.ayas.css({
                                    'display': 'block',
                                    'text-align': 'justify',
                                    'margin-top': '20px',
                                    'margin-bottom': '20px',
                                    'margin-right': 'auto',
                                    'margin-left': 'auto',
                                    'width': '590px',
                                    'direction': 'rtl',
                                });
                                sura.aya.css({
                                    'text-align': 'justify',
                                    'direction': 'rtl',
                                    'display': 'inline'
                                });
                                sura.bismillah.css({
                                    'display': 'block',
                                    'text-align': 'center',
                                    'direction': 'rtl',
                                    'margin-top': '10px',
                                    'margin-bottom': '-20px',
                                    'font-size': '38px'
                                });
                                $('sura>ayas>aya>number').css({
                                    'background': 'url(aya.png) 0px 0px no-repeat',
                                    'display': 'inline-block',
                                    'direction': 'rtl',
                                    'width': '35px',
                                    'height': '43px',
                                    'font-size': '15px',
                                    'letter-spacing': '-1px',
                                    'font-weight': 'bold',
                                    'line-height': '46px',
                                    'text-align': 'center'
                                });
                            }
                            $.sura.ayas.css({
                                'line-height': font.size + 1 + 'em'
                            });
                            $.sura.aya.css({
                                'font-size': font.size + 'em'
                            });
                            /*
$.each($.sura.ayas.find('number'), function(n,val) {
    var node = $(val); 
    var text = node.text();
    node.css({
*/
                            $('sura>ayas>aya>number').css({
                                'vertical-align': ((font.size - 0.75) / 3) + 'em'
                            });
                            //});
                            //verse  = $(this.body.dom).find('verse');
                            //verses.css('background','black');
                            //verse.css('color','green');
                        },
                        defaults: {
                            layout: 'fit'
                        },
                        bodyStyle: {
                            'padding-left': '25px',
                            'padding-right': '25px',
                            'padding-top': '15px',
                            'padding-bottom': '15px',
                            'direction': 'rtl',
                            'border': '1px solid black'
                        },
                        html: 'Use the toolbars'
                    }],

                    bbar: font.toolbar

                });
            }
            win.show();

        }
    });

    Quran.TabWindow = Ext.extend(Ext.app.Module, {
        id: 'tab-win',
        init: function() {
            this.launcher = {
                text: 'Tab Window',
                iconCls: 'tabs',
                handler: this.createWindow,
                scope: this
            }
        },

        createWindow: function() {
            var desktop = this.app.getDesktop();
            var win = desktop.getWindow('tab-win');
            if (!win) {
                win = desktop.createWindow({
                    id: 'tab-win',
                    title: 'Tab Window',
                    width: 740,
                    height: 480,
                    iconCls: 'tabs',
                    shim: false,
                    animCollapse: false,
                    border: false,
                    constrainHeader: true,

                    layout: 'fit',
                    items: new Ext.TabPanel({
                        activeTab: 0,

                        items: [{
                            title: 'Tab Text 1',
                            header: false,
                            html: '<p>Something useful would be in here.</p>',
                            border: false
                        },
                        {
                            title: 'Tab Text 2',
                            header: false,
                            html: '<p>Something useful would be in here.</p>',
                            border: false
                        },
                        {
                            title: 'Tab Text 3',
                            header: false,
                            html: '<p>Something useful would be in here.</p>',
                            border: false
                        },
                        {
                            title: 'Tab Text 4',
                            header: false,
                            html: '<p>Something useful would be in here.</p>',
                            border: false
                        }]
                    })
                });
            }
            win.show();
        }
    });

    Quran.AccordionWindow = Ext.extend(Ext.app.Module, {
        id: 'acc-win',
        init: function() {
            this.launcher = {
                text: 'Accordion Window',
                iconCls: 'accordion',
                handler: this.createWindow,
                scope: this
            }
        },

        createWindow: function() {
            var desktop = this.app.getDesktop();
            var win = desktop.getWindow('acc-win');
            if (!win) {
                win = desktop.createWindow({
                    id: 'acc-win',
                    title: 'Accordion Window',
                    width: 250,
                    height: 400,
                    iconCls: 'accordion',
                    shim: false,
                    animCollapse: false,
                    constrainHeader: true,

                    tbar: [{
                        tooltip: {
                            title: 'Rich Tooltips',
                            text: 'Let your users know what they can do!'
                        },
                        iconCls: 'connect'
                    },
                    '-', {
                        tooltip: 'Add a new user',
                        iconCls: 'user-add'
                    },
                    ' ', {
                        tooltip: 'Remove the selected user',
                        iconCls: 'user-delete'
                    }],

                    layout: 'accordion',
                    border: false,
                    layoutConfig: {
                        animate: false
                    },

                    items: [new Ext.tree.TreePanel({
                        id: 'im-tree',
                        title: 'Online Users',
                        loader: new Ext.tree.TreeLoader(),
                        rootVisible: false,
                        lines: false,
                        autoScroll: true,
                        tools: [{
                            id: 'refresh',
                            on: {
                                click: function() {
                                    var tree = Ext.getCmp('im-tree');
                                    tree.body.mask('Loading', 'x-mask-loading');
                                    tree.root.reload();
                                    tree.root.collapse(true, false);
                                    setTimeout(function() { // mimic a server call
                                        tree.body.unmask();
                                        tree.root.expand(true, true);
                                    },
                                    1000);
                                }
                            }
                        }],
                        root: new Ext.tree.AsyncTreeNode({
                            text: 'Online',
                            children: [{
                                text: 'Friends',
                                expanded: true,
                                children: [{
                                    text: 'Jack',
                                    iconCls: 'user',
                                    leaf: true
                                },
                                {
                                    text: 'Brian',
                                    iconCls: 'user',
                                    leaf: true
                                },
                                {
                                    text: 'Jon',
                                    iconCls: 'user',
                                    leaf: true
                                },
                                {
                                    text: 'Tim',
                                    iconCls: 'user',
                                    leaf: true
                                },
                                {
                                    text: 'Nige',
                                    iconCls: 'user',
                                    leaf: true
                                },
                                {
                                    text: 'Fred',
                                    iconCls: 'user',
                                    leaf: true
                                },
                                {
                                    text: 'Bob',
                                    iconCls: 'user',
                                    leaf: true
                                }]
                            },
                            {
                                text: 'Family',
                                expanded: true,
                                children: [{
                                    text: 'Kelly',
                                    iconCls: 'user-girl',
                                    leaf: true
                                },
                                {
                                    text: 'Sara',
                                    iconCls: 'user-girl',
                                    leaf: true
                                },
                                {
                                    text: 'Zack',
                                    iconCls: 'user-kid',
                                    leaf: true
                                },
                                {
                                    text: 'John',
                                    iconCls: 'user-kid',
                                    leaf: true
                                }]
                            }]
                        })
                    }), {
                        title: 'Settings',
                        html: '<p>Something useful would be in here.</p>',
                        autoScroll: true
                    },
                    {
                        title: 'Even More Stuff',
                        html: '<p>Something useful would be in here.</p>'
                    },
                    {
                        title: 'My Stuff',
                        html: '<p>Something useful would be in here.</p>'
                    }]
                });
            }
            win.show();
        }
    });

    // for example purposes
    var windowIndex = 0;

    Quran.BogusModule = Ext.extend(Ext.app.Module, {
        init: function() {
            this.launcher = {
                text: 'Window ' + (++windowIndex),
                iconCls: 'bogus',
                handler: this.createWindow,
                scope: this,
                windowId: windowIndex
            }
        },

        createWindow: function(src) {
            var desktop = this.app.getDesktop();
            var win = desktop.getWindow('bogus' + src.windowId);
            if (!win) {
                win = desktop.createWindow({
                    id: 'bogus' + src.windowId,
                    title: src.text,
                    width: 640,
                    height: 480,
                    html: '<p>Something useful would be in here.</p>',
                    iconCls: 'bogus',
                    shim: false,
                    animCollapse: false,
                    constrainHeader: true
                });
            }
            win.show();
        }
    });

    Quran.BogusMenuModule = Ext.extend(Quran.BogusModule, {
        init: function() {
            this.launcher = {
                text: 'Bogus Submenu',
                iconCls: 'bogus',
                handler: function() {
                    return false;
                },
                menu: {
                    items: [{
                        text: 'Bogus Window ' + (++windowIndex),
                        iconCls: 'bogus',
                        handler: this.createWindow,
                        scope: this,
                        windowId: windowIndex
                    },
                    {
                        text: 'Bogus Window ' + (++windowIndex),
                        iconCls: 'bogus',
                        handler: this.createWindow,
                        scope: this,
                        windowId: windowIndex
                    },
                    {
                        text: 'Bogus Window ' + (++windowIndex),
                        iconCls: 'bogus',
                        handler: this.createWindow,
                        scope: this,
                        windowId: windowIndex
                    },
                    {
                        text: 'Bogus Window ' + (++windowIndex),
                        iconCls: 'bogus',
                        handler: this.createWindow,
                        scope: this,
                        windowId: windowIndex
                    },
                    {
                        text: 'Bogus Window ' + (++windowIndex),
                        iconCls: 'bogus',
                        handler: this.createWindow,
                        scope: this,
                        windowId: windowIndex
                    }]
                }
            }
        }
    });

    // Array data for the grid
    Ext.data.bogus = [['3m Co', 71.72, 0.02, 0.03, '9/1 12:00am'], ['Alcoa Inc', 29.01, 0.42, 1.47, '9/1 12:00am'], ['American Express Company', 52.55, 0.01, 0.02, '9/1 12:00am'], ['American International Group, Inc.', 64.13, 0.31, 0.49, '9/1 12:00am'], ['AT&T Inc.', 31.61, -0.48, -1.54, '9/1 12:00am'], ['Caterpillar Inc.', 67.27, 0.92, 1.39, '9/1 12:00am'], ['Citigroup, Inc.', 49.37, 0.02, 0.04, '9/1 12:00am'], ['Exxon Mobil Corp', 68.1, -0.43, -0.64, '9/1 12:00am'], ['General Electric Company', 34.14, -0.08, -0.23, '9/1 12:00am'], ['General Motors Corporation', 30.27, 1.09, 3.74, '9/1 12:00am'], ['Hewlett-Packard Co.', 36.53, -0.03, -0.08, '9/1 12:00am'], ['Honeywell Intl Inc', 38.77, 0.05, 0.13, '9/1 12:00am'], ['Intel Corporation', 19.88, 0.31, 1.58, '9/1 12:00am'], ['Johnson & Johnson', 64.72, 0.06, 0.09, '9/1 12:00am'], ['Merck & Co., Inc.', 40.96, 0.41, 1.01, '9/1 12:00am'], ['Microsoft Corporation', 25.84, 0.14, 0.54, '9/1 12:00am'], ['The Coca-Cola Company', 45.07, 0.26, 0.58, '9/1 12:00am'], ['The Procter & Gamble Company', 61.91, 0.01, 0.02, '9/1 12:00am'], ['Wal-Mart Stores, Inc.', 45.45, 0.73, 1.63, '9/1 12:00am'], ['Walt Disney Company (The) (Holding Company)', 29.89, 0.24, 0.81, '9/1 12:00am']];
</script>
